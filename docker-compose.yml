services:
  postgres:
    image: postgres:17.5-alpine
    container_name: postgres
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 5s
      start_interval: 5s

  redis:
    image: redis:8.0.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: [ "redis-server", "--port", "${REDIS_PORT}" ]
    volumes:
      - redis-data:/var/lib/redis/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping" ]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 5s

  vacancy-parser:
    container_name: vacancy-parser
    build:
      context: .
      dockerfile: services/vacancy-parser/Dockerfile
      target: ${ENV_MODE}
    env_file: .env
    volumes:
      - ./services/vacancy-parser/src:/app/services/vacancy-parser/src
      - ./libs:/app/libs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  vacancy-parser-worker:
    container_name: vacancy-parser-worker
    build:
      context: .
      dockerfile: services/vacancy-parser/Dockerfile
      target: ${ENV_MODE}
    command: ["celery", "-A", "celery_app.app", "worker", "-l", "${LOG_LEVEL}"]
    env_file: .env
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./services/vacancy-parser/src:/app/services/vacancy-parser/src
      - ./libs:/app/libs

  vacancy-parser-beat:
    container_name: vacancy-parser-beat
    build:
      context: .
      dockerfile: services/vacancy-parser/Dockerfile
      target: ${ENV_MODE}
    command: [ "celery", "-A", "celery_app.app", "beat", "-l", "${LOG_LEVEL}" ]
    env_file: .env
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./services/vacancy-parser/src:/app/services/vacancy-parser/src
      - ./libs:/app/libs

  vacancy-parser-flower:
    container_name: vacancy-parser-flower
    build:
      context: .
      dockerfile: services/vacancy-parser/Dockerfile
      target: ${ENV_MODE}
    env_file: .env
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    networks:
      - app-network
    command: ["celery", "-A", "celery_app.app", "flower", "-l", "${LOG_LEVEL}"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
    - ./libs:/app/libs

  gpt-api:
    container_name: gpt-api
    build:
      context: .
      dockerfile: services/gpt-api/Dockerfile
      target: ${ENV_MODE}
    env_file: .env
    ports:
      - "${GPT_API_PORT}:${GPT_API_PORT}"
    volumes:
      - ./services/gpt-api/src:/app/services/gpt-api/src
      - ./libs:/app/libs
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://gpt-api:${GPT_API_PORT}/health" ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

  telegram-api:
    container_name: telegram-api
    build:
      context: .
      dockerfile: services/telegram-api/Dockerfile
      target: ${ENV_MODE}
    env_file: .env
    ports:
      - "${TELEGRAM_API_PORT}:${TELEGRAM_API_PORT}"
    volumes:
      - ./services/telegram-api/src:/app/services/telegram-api/src
      - ./libs:/app/libs
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://telegram-api:${TELEGRAM_API_PORT}/health" ]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s


networks:
  app-network:
    driver: bridge


volumes:
  postgres-data:
  redis-data:
